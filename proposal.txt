Abstract

There have been catastrophic but small modifications to openssl in the
past
(https://isotoma.com/blog/2008/05/14/debians-openssl-disaster/)[1]
that drastically reduced the potential number of keys that could be
generated during key generation. We'd like to see if a similar
vulnerability that is easy to exploit could still be introduced into
the codebase with a small modification to the base source of openssl.


Introduction

Background:

In 2008 a debian developer made a patch to openssl to fix valgrind
warnings. Parts of openssl were deliberately using uninitialized
memory to add entropy for key generation, and this caused client
programs that linked to openssl to generate error/warnings when
developers tried to validate programs with valgrind. However, without
this extra entropy the number of possible keys was drastically
reduced. This was a very small code change that resulted in a very
easy exploit.

Motivation

We'd like to dig into the source code of openssl and see if a similar
exploit is still easy to introduce and reproduce a working exploit.

Goal

We'd like to reproduce the 2008 bug and demonstrate a working exploit
(i.e. we'd like to derive a key and decrypt a file for example), and
show that it could be very simple for a disgruntled employee or
malicious actor to introduce a small patch to openssl in a downstream
distribution (or potentially to the project itself) that could make it
very vulnerable.


Key idea/approach

We'd like to fork a current openssl version, see if we can make a
small modification to the code that reduces the possible number of
keys. This modification should be similar to the exploit in [1] in
that it is a small number of lines of code that decreases entropy for
key generation, making it easier to guess the private key generated by
openssl.

Then we would create a small program that can guess the key in a
reasonable amount of time since it knows that the keyspace is now much
smaller. We could then for example forge a signature or decrypt a file
encrypted with the public key.


Expected results

A runnable 'exploit' that works on a modified openssl. This should
demonstrate that it only takes a small change to openssl that could be
made in any number of places to decrease the potential keyspace for
private keys.

Conclusion

We'd like to create an easy-to-exploit vulnerability in the current
openssl source that is similar to the one inadvertently introduced
into the debian source code in 2008 [1]. If it's still possible to
make such a change, this raises concerns about the security of an open
source security-critical system like openssl.

References

[1] https://isotoma.com/blog/2008/05/14/debians-openssl-disaster/

[2] [ debian bug page ]

[3] [ other articles about the exploit ]

[4] [ CVE # ]
